#version 330 core

in VS_OUT {
	vec3 fragPos;
	vec3 normal;
} fs_in;

struct Light {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 position;
}

struct Object {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
}

out vec4 fragColor;

uniform vec3 viewPos;
uniform Light light1;
uniform Light light2;
uniform Object object;

vec3 fragNormal;
vec3 viewDir;

vec4 blinn(Light light) {
	vec3 lightDir = normalize(lightPos - fs_in.fragPos);
	float diff = max(dot(lightDir, fragNormal), 0.0);
	vec3 reflectDir = reflect(-lightDir, normal);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
	return vec4((ambient + (diff * object.diffuse * light.diffuse)  + (spec * object.specular * light.specular)), 1.0);
}

void main() {
	fragNormal = normalize(fs_in.normal);
	viewDir = normalize(viewPos - fs_in.fragPos);
	fragColor = blinn(light1);
	fragColor += blinn(light2);
}