#version 450 core

struct Light {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	vec3 position;
};

struct Object {
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

in vec3 FragPos;
in vec3 Normal;

uniform vec3 viewPos;
uniform Light light1;
uniform Light light2;
uniform Object object;

out vec4 fragColor;

// global variables
vec3 fragNormal, viewDir;

vec4 blinn(Light light) {
  vec3 lightDir = normalize(light.position - FragPos);
	float diff = max(dot(lightDir, fragNormal), 0.0);
	vec3 reflectDir = reflect(-lightDir, fragNormal);
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(fragNormal, halfwayDir), 0.0), 32.0);
	return vec4((object.ambient + (diff * object.diffuse * light.diffuse)  + (spec * object.specular * light.specular)), 1.0);
}

void main() {
  fragNormal = normalize(Normal);
  viewDir = normalize(viewPos - FragPos);
  fragColor = blinn(light1);
  fragColor += blinn(light2);
}
